using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using UnityEditor.EditorTools;
using UnityEngine;
using UnityEngine.Events;

public class SanityManager : Singleton<SanityManager>
{
    [Header("Settings")]
    [SerializeField] float maxSanity;
    [Tooltip("Sanity loss in units pr. second")]
    [SerializeField] float sanityDropRate;
    [Tooltip("How many sanity units between each stage")]
    [SerializeField] float sanityLevelIntervalSize;

    public UnityAction<SanityLevel> OnSanityChange;

<<<<<<< HEAD
    /// <summary>
    /// Get the current sanity loss in percent | 
    /// <returns> Max sanity: 0 | Min sanity: 1</returns>
    /// </summary>
    public float SanityLoss => (CurrentSanity * -1 + maxSanity) / maxSanity;

    public float CurrentSanity { private set; get; }
=======
    public float currentSanity { private set; get; }
>>>>>>> 974bd6d (Added a 'Sanity Effect' script and changed name of Sanity script to SanityManager)
    SanityLevel currentSanityLevel;

    void Start()
    {
<<<<<<< HEAD
        CurrentSanity = maxSanity;
        currentSanityLevel = SanityLevel.Sane;
        StartCoroutine(LateStart(0.2f));
    }

    // This is gross but unity doesn't have in built LateStart script :(
    // The OnSanityChange will get called before sanityClutter script is ready
    IEnumerator LateStart(float seconds)
    {
        yield return new WaitForSeconds(seconds);

        OnSanityChange?.Invoke(currentSanityLevel);
=======
        currentSanity = maxSanity;
        currentSanityLevel = SanityLevel.Sane;
>>>>>>> 974bd6d (Added a 'Sanity Effect' script and changed name of Sanity script to SanityManager)
    }

    void Update()
    {
<<<<<<< HEAD
        CurrentSanity -= sanityDropRate * Time.deltaTime;

        // Sanity lower than level below
        if (CurrentSanity <= ((int)currentSanityLevel - 1) * sanityLevelIntervalSize)
=======
        currentSanity -= sanityDropRate * Time.deltaTime;

        if (currentSanity < ((float)currentSanityLevel - 1) * sanityLevelIntervalSize)
>>>>>>> 974bd6d (Added a 'Sanity Effect' script and changed name of Sanity script to SanityManager)
        {
            currentSanityLevel -= 1;
            OnSanityChange?.Invoke(currentSanityLevel);
        }
<<<<<<< HEAD
        // Sanity higher than level above
        else if (CurrentSanity >= ((int)currentSanityLevel + 1) * sanityLevelIntervalSize)
        {
            currentSanityLevel += 1;
            OnSanityChange?.Invoke(currentSanityLevel);
        }
=======
>>>>>>> 974bd6d (Added a 'Sanity Effect' script and changed name of Sanity script to SanityManager)
    }

    public void AttackSanity(float damage)
    {
<<<<<<< HEAD
        CurrentSanity -= damage;
        CurrentSanity = Mathf.Max(CurrentSanity, 0);
    }

    public void HealSanity(float healing)
    {
        CurrentSanity += healing;
        CurrentSanity = Mathf.Min(CurrentSanity, maxSanity);
=======
        currentSanity -= damage;
>>>>>>> 974bd6d (Added a 'Sanity Effect' script and changed name of Sanity script to SanityManager)
    }
}

public enum SanityLevel
{
    Dead,
    Insane,
    Shaking,
    Scared,
    Sane,
}